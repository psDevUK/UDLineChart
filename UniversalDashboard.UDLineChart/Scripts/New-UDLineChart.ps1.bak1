<#
.SYNOPSIS
    Sample control for UniversalDashboard.
.DESCRIPTION
    Sample control function for UniversalDashboard. This function must have an ID and return a hash table.
.PARAMETER Id
    An id for the component default value will be generated by new-guid.
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    Inputs (if any)
.OUTPUTS
    Output (if any)
.NOTES
    General notes
#>
function New-UDLineChart {
    param(
        [Parameter()]
        [string]$Id = (New-Guid).ToString(),
        [Parameter()]
        [string]$dataKeyX,
        [Parameter()]
        [string]$dataKeyY,
        [Parameter()]
        [string]$gridStroke = "#ccc",
        [Parameter()]
        [string]$strokeDasharray = "3 3",
        [Parameter()]
        [int]$width = 500,
        [Parameter()]
        [int]$height = 300,
        [Parameter()]
        [string]$dataKey1,
        [Parameter()]
        [string]$dataKey2,
        [Parameter()]
        [array]$data,
        [Parameter()]
        [ValidateSet("horizontal", "vertical")]
        [string]$layout = "horizontal",
        [Parameter()]
        [ValidateSet("number", "category")]
        [string]$typeX = "category",
        [Parameter()]
        [ValidateSet("number", "category")]
        [string]$typeY = "number",
        [Parameter()]
        [ValidateSet('basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter')]
        [string]$type1 = 'monotone',
        [Parameter()]
        [ValidateSet('basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter')]
        [string]$type2 = 'monotone',
        [Parameter()]
        [string]$stroke1 = "#8884d8",
        [Parameter()]
        [string]$stroke2 = "#82ca9d",
        [Parameter()]
        [int]$animationBegin1 = 1000,
        [Parameter()]
        [int]$animationDuration1 = 3000,
        [Parameter()]
        [ValidateSet('ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear')]
        [string]$animationEasing1 = 'linear',
        [Parameter()]
        [ValidateSet('line', 'square', 'rect', 'circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye', 'none')]
        [string]$legendType1 = 'diamond',
        [int]$animationBegin2 = 1000,
        [Parameter()]
        [int]$animationDuration2 = 3000,
        [Parameter()]
        [ValidateSet('ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear')]
        [string]$animationEasing2 = 'linear',
        [Parameter()]
        [ValidateSet('line', 'square', 'rect', 'circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye', 'none')]
        [string]$legendType2 = 'diamond'
    )

    End {

        @{
            # The AssetID of the main JS File
            assetId            = $AssetId
            # Tell UD this is a plugin
            isPlugin           = $true
            # This ID must be the same as the one used in the JavaScript to register the control with UD
            type               = "UD-LineChart"
            # An ID is mandatory
            id                 = $Id

            # This is where you can put any other properties. They are passed to the React control's props
            # The keys are case-sensitive in JS.
            dataKeyX           = $dataKeyX
            dataKeyY           = $dataKeyY
            width              = $width
            height             = $height
            dataKey1           = $dataKey1
            dataKey2           = $dataKey2
            data               = $data
            type1              = $type1
            type2              = $type2
            stroke1            = $stroke1
            stroke2            = $stroke2
            layout             = $layout
            animationBegin1    = $animationBegin1
            animationDuration1 = $animationDuration1
            animationEasing1   = $animationEasing1
            legendType1        = $legendType1
            animationBegin2    = $animationBegin2
            animationDuration2 = $animationDuration2
            animationEasing2   = $animationEasing2
            legendType2        = $legendType2
            strokeDasharray    = $strokeDasharray
            typeX              = $typeX
            typeY              = $typeY
        }

    }
}
